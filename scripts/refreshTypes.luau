--!strict

local fs = require("@lune/fs")
local luau = require("@lune/luau")

local outputDir = "project/template/types/XMLTypeDefs.luau"
local fileDir = "project/src/layout.xml"

return function()
	fs.writeFile(outputDir, "return nil") -- make temporary output file

	--> Iterate through XML to get all actors, their names and types
	local extractedTypes = { _all = {} }
	if fs.isFile(fileDir) then
		local file = fs.readFile(fileDir)
		local handler = require("xml/xmlhandler/tree"):new()
		require("xml/xml2lua").parser(handler):parse(file)

		local function iterateXML(startingPoint)
			for _, actorLayer in startingPoint do
				if actorLayer[1] then
					iterateXML(actorLayer)
					continue
				end
				if actorLayer.children then iterateXML(actorLayer.children) end

				local attributes = actorLayer._attr
				if attributes and attributes.Name and attributes.Name ~= "" then
					local thisType = attributes.Type or "Actor"
					if not extractedTypes[thisType] then extractedTypes[thisType] = {} end

					local thisActor = { name = attributes.Name, type = thisType }
					table.insert(extractedTypes[thisType], thisActor)
					table.insert(extractedTypes._all, thisActor)
				end
			end
		end
		iterateXML(handler.root)
	end

	do --> Capture Declarative Actors
		local success, configuration = pcall(function() return require("../project/src/configuration") :: any end)
		if (success and configuration) and configuration.DECLARATIVE_LAYOUT_ENABLED then
			pcall(function()
				local utils = require("mock/utilities")
				utils.beginMock(true)
				utils.cache["project/template/functions/declareActors.luau"] = {
					CreateActor = function(thisType: string)
						thisType = thisType or "Actor"
						if thisType == "" then thisType = "Actor" end
						if not extractedTypes[thisType] then extractedTypes[thisType] = {} end

						return function(props: { [any]: any })
							if props.Name and props.Name ~= "" and props.Name ~= "_" then
								local thisActor = { name = props.Name, type = thisType }
								table.insert(extractedTypes[thisType], thisActor)
								table.insert(extractedTypes._all, thisActor)
							end

							return { get = function() end, appendChild = function() end } -- dummy table
						end
					end,
				}

				utils.runScript("project/src/main.luau")
			end)
		end
	end

	local output = "-- This file was @generated by a script.\n--> lune run scripts/refresh\n"
	output ..= `local Types = require("TypeDefs")\n`

	do --> Generate String Types
		local actorTypes = {
			Actor = true,
			ActorFrame = true,
			ActorFrameTexture = true,
			ActorProxy = true,
			ActorScroller = true,
			ActorSound = true,
			BitmapText = true,
			Model = true,
			Polygon = true,
			Sprite = true,
			Quad = true,
		}

		local function generateTypeString(
			name: string,
			actors: { { name: string, type: string } },
			generateStringType: boolean?
		)
			local thisOutput = `export type {name} = {if generateStringType then "string" else "{"}`
			for i, actor in actors do
				if generateStringType then
					thisOutput ..= ` | "{actor.name}"`
				else
					thisOutput ..= `{if i == 1 then "\n" else ""}\t["{actor.name}"]: Types.{actor.type},\n`
				end
			end

			if not generateStringType then
				thisOutput ..= "}"
			end
			return thisOutput
		end

		local generated = {}
		for _, types in { actorTypes :: any, extractedTypes } do
			for actorType in types do
				if generated[actorType] then continue end
				generated[actorType] = true

				local allActors = extractedTypes[actorType] or {}
				if actorType == "_all" then actorType = "all" end
				--	output ..= "\n" .. generateTypeString(`{actorType}_extracted`, allActors)
				output ..= "\n" .. generateTypeString(`{actorType}_names`, allActors, true)
			end
		end
	end

	do --> Generate _T.Actors type
		local function validateLua(str) return (pcall(luau.compile, str)) end
		local makeActorTableProxy = require("../project/template/functions/scanActors").makeProxy

		local actorTableProcessor = "return function(outputTable)"
		local actorTable, clearMetatables = makeActorTableProxy()
		for _, actor in extractedTypes._all do
			if not validateLua(`t.{actor.name}=t`) then continue end
			actorTableProcessor ..= `\n\toutputTable.{actor.name}="{actor.type}"\n`
		end

		actorTableProcessor ..= "\nend"
		luau.load(luau.compile(actorTableProcessor))()(actorTable)
		clearMetatables()

		local function dumpTableString(tab, newLine: boolean?)
			if typeof(tab) == "string" then return `(nil :: any) :: Types.{tab}` end
			local final = "{"
			for i, v in tab do
				if typeof(i) ~= "number" then i = `"{i}"` end
				final ..= ` {if newLine then "\n\t" else ""}[{i}] = {dumpTableString(v)},`
			end
			return `{final}{if newLine then "\n" else " "}}`
		end

		output ..= `\n\n-- this sucks\nexport type actorTable = typeof({dumpTableString(actorTable, true)})`
	end

	--> Finalize
	output ..= "\n\nreturn {}"
	fs.writeFile(outputDir, output)
end
