--!strict

-- This file was @generated by a script.
-- https://github.com/synnwave/nITG-lua-type-definitions

--> CLASSES

----> CLASS: PrefsManager <----
export type PrefsManager = {
	GetPreference: (self: PrefsManager, pref: string) -> any,
	SetPreference: (self: PrefsManager, pref: string, value: any) -> (),
}
-------------------------------

----> CLASS: HighScoreList <----
export type HighScoreList = {
	GetHighScores: (self: HighScoreList) -> { any },
}
--------------------------------

----> CLASS: MessageManager <----
export type MessageManager = {
	Broadcast: (self: MessageManager, message: string) -> number,
}
---------------------------------

----> CLASS: GameSoundManager <----
export type GameSoundManager = {
	DimMusic: (self: GameSoundManager, volume: number, duration: number) -> (),
	PlayOnce: (self: GameSoundManager, path: string) -> (),
}
-----------------------------------

----> CLASS: RageShaderProgram <----
export type RageShaderProgram = {
	uniform1i: (self: RageShaderProgram, uniformName: string, value: number) -> (),
	uniform3fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	define: (self: RageShaderProgram, key: string, value: string | boolean | number | nil) -> (),
	compileImmediate: (self: RageShaderProgram) -> (),
	uniformMatrix2fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	uniformMatrix3fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	uniformMatrix4fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	compile: (self: RageShaderProgram, vertCode: string, fragCode: string) -> (),
	uniform2f: (self: RageShaderProgram, uniformName: string, x: number, y: number) -> (),
	uniform2fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	uniform3f: (self: RageShaderProgram, uniformName: string, x: number, y: number, z: number) -> (),
	uniform1f: (self: RageShaderProgram, uniformName: string, value: number) -> (),
	uniform1fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	uniform1iv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
	clearDefine: (self: RageShaderProgram, key: string) -> (),
	uniformTexture: (self: RageShaderProgram, uniformName: string, texture: RageTexture) -> (),
	uniform4f: (self: RageShaderProgram, uniformName: string, x: number, y: number, z: number, w: number) -> (),
	uniform4fv: (self: RageShaderProgram, uniformName: string, values: { [any]: any }) -> (),
}
------------------------------------

----> CLASS: Steps <----
export type Steps = {
	GetRadarValues: (self: Steps) -> RadarValues,
	GetDifficulty: (self: Steps) -> number,
	GetDescription: (self: Steps) -> string,
	GetStepsType: (self: Steps) -> number,
	GetMeter: (self: Steps) -> number,
}
------------------------

----> CLASS: ProfileManager <----
export type ProfileManager = {
	GetProfile: (self: ProfileManager, playerNumber: number) -> Profile,
	GetMachineProfile: (self: ProfileManager) -> Profile,
	SaveMachineProfile: (self: ProfileManager) -> (),
	IsPersistentProfile: (self: ProfileManager, playerNumber: number) -> boolean,
}
---------------------------------

----> CLASS: GameState <----
export type GameState = {
	GetCourseSongIndex: (self: GameState) -> number,
	GetMusicRate: (self: GameState) -> number,
	IsSyncDataChanged: (self: GameState) -> boolean,
	IsExtraStage: (self: GameState) -> boolean,
	GetCurrentSteps: (self: GameState, playerNumber: number) -> Steps,
	SetCurrentSteps: (self: GameState, playerNumber: number, steps: Steps) -> (),
	GetSortOrder: (self: GameState) -> number,
	HideStageText: (self: GameState, val: boolean) -> (),
	ForceSmoothLines: (self: GameState, enable: number) -> (),
	SetEnv: (self: GameState, key: string, value: string) -> (),
	Crash: (self: GameState, message: string) -> never,
	GetX: (self: GameState, playerNumber: number, column: number, yOffset: number) -> number,
	DelayedGameCommand: (self: GameState, cmd: string) -> (),
	PlayersCanJoin: (self: GameState) -> boolean,
	GetMasterPlayerNumber: (self: GameState) -> number,
	SetCurrentCourse: (self: GameState, course: Course) -> (),
	GetVersionDate: (self: GameState) -> string,
	GetEnv: (self: GameState, key: string) -> string | nil,
	IsCourseMode: (self: GameState) -> boolean,
	FinishSong: (self: GameState) -> (),
	GetSongBeat: (self: GameState) -> number,
	SetPreferredSong: (self: GameState, song: Song) -> (),
	GetCoinsNeededToJoin: (self: GameState) -> number,
	GetRealPath: (self: GameState, path: string) -> (),
	GetFileStructure: (self: GameState, path: string) -> { string },
	PlayerDifficulty: (self: GameState, playerNumber: number) -> number,
	GetPlayMode: (self: GameState) -> number,
	IsSideJoined: (self: GameState, playerNumber: number) -> boolean,
	ApplyGameCommand: (self: GameState, cmd: string, playerNumber: number | nil) -> (),
	IsExtraStage2: (self: GameState) -> boolean,
	SetSRT: (self: GameState, num: number) -> (),
	GetInputMode: (self: GameState) -> number,
	GetPremium: (self: GameState) -> number,
	SetTemporaryEventMode: (self: GameState, enable: boolean) -> (),
	ApplyModifiers: (self: GameState, mods: string, playerNumber: number | nil) -> (),
	KeyPress: (self: GameState, key: number) -> (),
	UnloadSteps: (self: GameState, playerNumber: number) -> (),
	StageIndex: (self: GameState) -> number,
	GetY: (self: GameState, playerNumber: number, column: number, yOffset: number) -> number,
	PlayerIsUsingModifier: (self: GameState, playerNumber: number, modifier: string) -> boolean,
	IsDisqualified: (self: GameState, playerNumber: number) -> boolean,
	SetInputMode: (self: GameState, inputMode: number) -> (),
	SetSongEndTime: (self: GameState, seconds: number) -> (),
	SetSongPosition: (self: GameState, position: number) -> (),
	GetExternal: (self: GameState, index: number) -> (),
	IsPlayerEnabled: (self: GameState, playerNumber: number) -> boolean,
	GetEasiestStepsDifficulty: (self: GameState) -> number,
	OnlyOpenITGMods: (self: GameState, enable: boolean) -> (),
	GetCurrentNoteSkins: (self: GameState) -> { [any]: any },
	SetSongBeat: (self: GameState, beat: number) -> (),
	ReloadSteps: (self: GameState) -> (),
	GetZ: (self: GameState, playerNumber: number, column: number, yOffset: number) -> number,
	IsGoalComplete: (self: GameState, playerNumber: number) -> boolean,
	AnyPlayerHasRankingFeats: (self: GameState) -> boolean,
	IsEventMode: (self: GameState) -> boolean,
	SetExternal: (self: GameState, index: number, flag: number) -> (),
	GetCoins: (self: GameState) -> number,
	SetCurrentSong: (self: GameState, song: Song) -> (),
	RecompileShadersOnResize: (self: GameState, enable: boolean) -> (),
	GetPreferredSong: (self: GameState) -> Song,
	LaunchAttack: (self: GameState, startTime: number, length: number, mods: string, playerNumber: number | nil) -> (),
	GetNumSidesJoined: (self: GameState) -> number,
	JoinPlayer: (self: GameState, playerNumber: number) -> (),
	IsHumanPlayer: (self: GameState, playerNumber: number) -> boolean,
	IsWinner: (self: GameState, playerNumber: number) -> boolean,
	GetDerp: (self: GameState) -> boolean,
	GetNumPlayersEnabled: (self: GameState) -> number,
	SetScreenID: (self: GameState, id: number) -> (),
	IsEditMode: (self: GameState) -> boolean,
	GetCurBPM: (self: GameState) -> number,
	GetCurrentTrail: (self: GameState, playerNumber: number) -> Trail | nil,
	GetPlayerDisplayName: (self: GameState, playerNumber: number) -> string,
	GetEditSourceSteps: (self: GameState) -> Steps | nil,
	GetPreferredDifficulty: (self: GameState, playerNumber: number) -> number,
	GetSongTime: (self: GameState) -> number,
	PlayerUsingBothSides: (self: GameState) -> number,
	GetCurrentGame: (self: GameState) -> Game,
	GetPlayerNameFromNameEntry: (self: GameState, playerNumber: number) -> string,
	GetSongBeatVisible: (self: GameState) -> number,
	GetScreenID: (self: GameState) -> number,
	IsDemonstration: (self: GameState) -> boolean,
	GetSongTimeVisible: (self: GameState) -> number,
	GetCurrentSong: (self: GameState) -> Song,
	Env: (self: GameState) -> { [any]: any },
	GetCurrentCourse: (self: GameState) -> Course,
	GetCurBPS: (self: GameState) -> number,
	GetCoinMode: (self: GameState) -> number,
}
----------------------------

----> CLASS: RadarValues <----
export type RadarValues = {
	GetValue: (self: RadarValues, category: number) -> (),
}
------------------------------

----> CLASS: MemoryCardManager <----
export type MemoryCardManager = {
	GetCardState: (self: MemoryCardManager, playerNumber: number) -> number,
}
------------------------------------

----> CLASS: UnlockManager <----
export type UnlockManager = {
	GetSongsUnlockedByCode: (self: UnlockManager, unlockCode: number) -> { [any]: any },
	GetStepsUnlockedByCode: (self: UnlockManager, unlockCode: number) -> { [any]: any },
	UnlockCode: (self: UnlockManager, unlockCode: number) -> (),
	PreferUnlockCode: (self: UnlockManager, unlockCode: number) -> (),
	FindCode: (self: UnlockManager, name: string) -> number | nil,
}
--------------------------------

----> CLASS: Trail <----
export type Trail = {
	GetLengthSeconds: (self: Trail) -> number,
	GetDifficulty: (self: Trail) -> number,
	GetStepsType: (self: Trail) -> number,
	GetRadarValues: (self: Trail) -> RadarValues,
}
------------------------

----> CLASS: ThemeManager <----
export type ThemeManager = {
	GetMetric: (self: ThemeManager, class: string, element: string) -> string,
	GetCurThemeName: (self: ThemeManager) -> string,
	GetCurLanguage: (self: ThemeManager) -> string,
	GetPath: (self: ThemeManager, type: number, class: string, element: string) -> string,
	GetThemeNames: (self: ThemeManager) -> { any },
}
-------------------------------

----> CLASS: Song <----
export type Song = {
	GetBackgroundPath: (self: Song) -> string | nil,
	SetSpellCardColor: (self: Song, index: number, r: number, g: number, b: number, a: number) -> (),
	GetSpellCards: (self: Song) -> { any },
	GetMinBPM: (self: Song) -> number,
	GetSongDir: (self: Song) -> string,
	MusicLengthSeconds: (self: Song) -> number,
	IsMarathon: (self: Song) -> boolean,
	GetTranslitArtist: (self: Song) -> string,
	GetUnlockMethod: (self: Song, difficulty: number) -> string,
	IsLong: (self: Song) -> boolean,
	ClearLabels: (self: Song) -> (),
	GetLabels: (self: Song) -> { [any]: any },
	GetNoteData: (self: Song, steps: Steps, useSeconds: boolean | nil, startBeat: number | nil, endBeat: number | nil) -> { any },
	GetMaxBPM: (self: Song) -> number,
	GetGroupName: (self: Song) -> string,
	GetAllSteps: (self: Song) -> { any },
	GetDisplaySubTitle: (self: Song) -> string,
	GetDisplayMainTitle: (self: Song) -> string,
	AddLabel: (self: Song, beat: number, name: string) -> (),
	GetStepsByStepsType: (self: Song, stepsType: number) -> { any },
	GetDisplayArtist: (self: Song) -> string,
	GetTranslitSubTitle: (self: Song) -> string,
	GetMusicPath: (self: Song) -> string,
	GetDisplayFullTitle: (self: Song) -> string,
	SetSpellCardTiming: (self: Song, index: number, startBeat: number, endBeat: number) -> (),
	SetSpellCardName: (self: Song, index: number, name: string) -> (),
	SetSpellCardDifficulty: (self: Song, index: number, difficulty: number) -> (),
	SetNumSpellCards: (self: Song, count: number) -> (),
	GetSampleLengthSeconds: (self: Song) -> number,
	IsCustomSong: (self: Song) -> boolean,
	GetGenre: (self: Song) -> string,
	GetTranslitFullTitle: (self: Song) -> string,
	GetTimingData: (self: Song) -> ({ number }, { number }),
	GetBannerPath: (self: Song) -> string | nil,
	GetSampleStartSeconds: (self: Song) -> number,
	GetBeatFromElapsedTime: (self: Song, seconds: number) -> number,
	GetTranslitMainTitle: (self: Song) -> string,
	GetElapsedTimeFromBeat: (self: Song, beat: number) -> number,
	StepsLengthSeconds: (self: Song) -> number,
}
-----------------------

----> CLASS: StageStats <----
export type StageStats = {
	GetGameplaySeconds: (self: StageStats) -> number,
	GetPlayedSongs: (self: StageStats) -> { any },
	GetTotalPossibleStepsSeconds: (self: StageStats) -> number,
	GetPossibleSongs: (self: StageStats) -> { any },
	GetPlayerStageStats: (self: StageStats, playerNumber: number) -> PlayerStageStats,
}
-----------------------------

----> CLASS: RageDisplay <----
export type RageDisplay = {
	GetWindowY: (self: RageDisplay) -> number,
	SetWindow: (self: RageDisplay, xPos: number, yPos: number, xZoom: number, yZoom: number) -> (),
	ShaderFuck: (self: RageDisplay, shader: RageShaderProgram) -> (),
	GetFPS: (self: RageDisplay) -> number,
	SetWindowAddY: (self: RageDisplay, y: number) -> (),
	SetWindowWidth: (self: RageDisplay, width: number) -> (),
	SetWindowZoomX: (self: RageDisplay, xZoom: number) -> (),
	GetDisplayHeight: (self: RageDisplay) -> number,
	GetDisplayWidth: (self: RageDisplay) -> number,
	SetWindowZoom: (self: RageDisplay, xZoom: number, yZoom: number) -> (),
	SetWindowY: (self: RageDisplay, y: number) -> (),
	GetVPF: (self: RageDisplay) -> number,
	GetWindowZoomY: (self: RageDisplay) -> number,
	GetCumFPS: (self: RageDisplay) -> number,
	SetWindowX: (self: RageDisplay, x: number) -> (),
	GetDesktopHeight: (self: RageDisplay) -> number,
	SetWindowZoomY: (self: RageDisplay, yZoom: number) -> (),
	SetWindowPositionAndSize: (self: RageDisplay, x: number, y: number, w: number, h: number) -> (),
	SetWindowPosition: (self: RageDisplay, x: number, y: number) -> (),
	GetDesktopWidth: (self: RageDisplay) -> number,
	ClearShaderFuck: (self: RageDisplay) -> (),
	SetWindowHeight: (self: RageDisplay, height: number) -> (),
	SetWindowAddX: (self: RageDisplay, x: number) -> (),
	GetWindowX: (self: RageDisplay) -> number,
	ChangeCentering: (self: RageDisplay, translateX: number, translateY: number, addX: number, addY: number) -> (),
	GetVendor: (self: RageDisplay) -> string,
	SetBorderless: (self: RageDisplay, enable: boolean) -> (),
	GetWindowZoomX: (self: RageDisplay) -> number,
	GetWindowWidth: (self: RageDisplay) -> number,
	GetWindowHeight: (self: RageDisplay) -> number,
}
------------------------------

----> CLASS: HighScore <----
export type HighScore = {
	IsFillInMarker: (self: HighScore) -> boolean,
	GetModifiers: (self: HighScore) -> string,
	GetSurvivalSeconds: (self: HighScore) -> number,
	GetScore: (self: HighScore) -> number,
	GetDate: (self: HighScore) -> string,
	GetName: (self: HighScore) -> string,
	GetPercentDP: (self: HighScore) -> number,
}
----------------------------

----> CLASS: SongManager <----
export type SongManager = {
	GetAllCourses: (self: SongManager, includeAutogen: boolean) -> { any },
	GetAllSongs: (self: SongManager) -> { any },
	FindCourse: (self: SongManager, name: string) -> Song | nil,
	GetRandomSong: (self: SongManager) -> Song,
	GetRandomCourse: (self: SongManager) -> Course,
	FindSong: (self: SongManager, name: string) -> Song | nil,
}
------------------------------

----> CLASS: StatsManager <----
export type StatsManager = {
	GetPlayedStageStats: (self: StatsManager, rounds: number) -> StageStats | nil,
	Reset: (self: StatsManager) -> (),
	GetCurStageStats: (self: StatsManager) -> StageStats,
	GetFinalGrade: (self: StatsManager, playerNumber: number) -> number,
	GetAccumStageStats: (self: StatsManager) -> StageStats,
	GetStagesPlayed: (self: StatsManager) -> number,
	GetBestGrade: (self: StatsManager) -> number,
	GetWorstGrade: (self: StatsManager) -> number,
}
-------------------------------

----> CLASS: ScreenManager <----
export type ScreenManager = {
	SystemMessage: (self: ScreenManager, message: string) -> (),
	SetInputMode: (self: ScreenManager, mode: number) -> (),
	GetOverlayScreens: (self: ScreenManager) -> { any },
	SystemMessageNoAnimate: (self: ScreenManager, message: string) -> (),
	OverlayMessage: (self: ScreenManager, message: string) -> (),
	GetTopScreen: (self: ScreenManager) -> ScreenGameplay,
	SetNewScreen: (self: ScreenManager, screenName: string) -> (),
	GetSharedBGA: (self: ScreenManager) -> ActorFrame,
	HideOverlayMessage: (self: ScreenManager) -> (),
}
--------------------------------

----> CLASS: Actor <----
export type Actor = {
	glow: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	queuemessage: (self: Actor, messageName: string) -> (),
	skewto: (self: Actor, amount: number) -> (),
	GetBaseZoomY: (self: Actor) -> number,
	addrotationy: (self: Actor, rotY: number) -> (),
	diffusebottomedge: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	scaletofit: (self: Actor, left: number, top: number, right: number, bottom: number) -> (),
	zbias: (self: Actor, bias: number) -> (),
	skewx: (self: Actor, amount: number) -> (),
	rainbow: (self: Actor) -> (),
	GetParent: (self: Actor) -> ActorFrame | nil,
	ztestmode: (self: Actor, mode: string) -> (),
	effectcolor2: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	addz: (self: Actor, z: number) -> (),
	GetXMLDir: (self: Actor) -> string,
	skewx2: (self: Actor, amount: number) -> (),
	animate: (self: Actor, enable: number) -> (),
	zoomx2: (self: Actor, scale: number) -> (),
	bounce: (self: Actor) -> (),
	GetEffectRotationX: (self: Actor) -> number,
	skewy2: (self: Actor, amount: number) -> (),
	GetSkewX: (self: Actor) -> number,
	GetSkewY: (self: Actor) -> number,
	clearzbuffer: (self: Actor, enable: number) -> (),
	cropright: (self: Actor, percent: number) -> (),
	GetEffectDelta: (self: Actor) -> number,
	zoomy: (self: Actor, scale: number) -> (),
	cropv: (self: Actor, percentTop: number, percentBottom: number) -> (),
	queuecommand: (self: Actor, commandName: string) -> (),
	xyza: (self: Actor, xPos: number, yPos: number, zPos: number, aux: number) -> (),
	fadeh: (self: Actor, percentLeft: number, percentRight: number) -> (),
	GetZoomX: (self: Actor) -> number,
	pause: (self: Actor) -> (),
	bob: (self: Actor) -> (),
	GetZoom: (self: Actor) -> number,
	aux: (self: Actor, value: number) -> (),
	halign: (self: Actor, hPos: number) -> (),
	cmd: (self: Actor, cmd: string) -> (),
	GetShader: (self: Actor) -> RageShaderProgram | nil,
	effectdelay: (self: Actor, delay: number) -> (),
	GetCurrentZoomZ: (self: Actor) -> number,
	GetY: (self: Actor) -> number,
	heading: (self: Actor, rotY: number) -> (),
	diffuse: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	valign: (self: Actor, vPos: number) -> (),
	GetName: (self: Actor) -> string,
	addrotationx: (self: Actor, rotX: number) -> (),
	ClearShader: (self: Actor) -> (),
	addrotationz: (self: Actor, rotZ: number) -> (),
	spin: (self: Actor) -> (),
	getaux: (self: Actor) -> number,
	SetTextureFiltering: (self: Actor, enable: boolean) -> (),
	GetEffectX: (self: Actor) -> number,
	zwrite: (self: Actor, enable: number) -> (),
	playcommand: (self: Actor, commandName: string) -> (),
	GetZoomZ: (self: Actor) -> number,
	GetEffectRotationY: (self: Actor) -> number,
	zoomz2: (self: Actor, scale: number) -> (),
	cullmode: (self: Actor, mode: string) -> (),
	diffuseramp: (self: Actor) -> (),
	GetRotationY: (self: Actor) -> number,
	zoomy2: (self: Actor, scale: number) -> (),
	GetTweenTimeLeft: (self: Actor) -> number,
	diffuselowerright: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	zoomxyz2: (self: Actor, scaleX: number, scaleY: number, scaleZ: number) -> (),
	glowramp: (self: Actor) -> (),
	x2: (self: Actor, xPos: number) -> (),
	GetBaseZoomZ: (self: Actor) -> number,
	linear: (self: Actor, duration: number) -> (),
	zoomtowidth: (self: Actor, width: number) -> (),
	effectperiod: (self: Actor, period: number) -> (),
	zoomtoheight: (self: Actor, height: number) -> (),
	zoomto: (self: Actor, width: number, height: number) -> (),
	rotationy: (self: Actor, rotY: number) -> (),
	xyz2: (self: Actor, xPos: number, yPos: number, zPos: number) -> (),
	diffuseleftedge: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	GetRotationX: (self: Actor) -> number,
	xy2: (self: Actor, xPos: number, yPos: number) -> (),
	GetEffectY: (self: Actor) -> number,
	SetHeight: (self: Actor, width: number) -> (),
	zoom: (self: Actor, scale: number) -> (),
	hascommand: (self: Actor, commandName: string) -> boolean,
	z2: (self: Actor, zPos: number) -> (),
	texturewrapping: (self: Actor, enable: number) -> (),
	roll: (self: Actor, rotZ: number) -> (),
	x: (self: Actor, xPos: number) -> (),
	GetCurrentZoomX: (self: Actor) -> number,
	y2: (self: Actor, yPos: number) -> (),
	GetWidth: (self: Actor) -> number,
	stretchto: (self: Actor, x1: number, y1: number, x2: number, y2: number) -> (),
	zoomx: (self: Actor, scale: number) -> (),
	xyz: (self: Actor, xPos: number, yPos: number, zPos: number) -> (),
	fadetop: (self: Actor, percent: number) -> (),
	zoom2: (self: Actor, scale: number) -> (),
	diffuselowerleft: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	glowblink: (self: Actor) -> (),
	GetRotationZ: (self: Actor) -> number,
	xy: (self: Actor, xPos: number, yPos: number) -> (),
	y: (self: Actor, yPos: number) -> (),
	GetHeight: (self: Actor) -> number,
	SetWidth: (self: Actor, width: number) -> (),
	z: (self: Actor, zPos: number) -> (),
	wag: (self: Actor) -> (),
	GetEffectRotationZ: (self: Actor) -> number,
	faderight: (self: Actor, percent: number) -> (),
	vibrate: (self: Actor) -> (),
	visible: (self: Actor, enable: number) -> (),
	basezoomy: (self: Actor, scale: number) -> (),
	GetX: (self: Actor) -> number,
	vertalign: (self: Actor, vAlign: string) -> (),
	stopeffect: (self: Actor) -> (),
	geteffectmagnitude: (self: Actor) -> (number, number, number),
	bouncebegin: (self: Actor, duration: number) -> (),
	pulseramp: (self: Actor) -> (),
	crop: (self: Actor, percentLeft: number, percentTop: number, percentRight: number, percentBottom: number) -> (),
	diffuseupperright: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	GetCurrentRotationX: (self: Actor) -> number,
	scaletocover: (self: Actor, left: number, top: number, right: number, bottom: number) -> (),
	texturefiltering: (self: Actor, enable: boolean) -> (),
	stoptweening: (self: Actor) -> (),
	GetHidden: (self: Actor) -> boolean,
	GetCurrentRotationZ: (self: Actor) -> number,
	pulse: (self: Actor) -> (),
	sleep: (self: Actor, duration: number) -> (),
	xywh: (self: Actor, x: number, y: number, w: number, h: number) -> (),
	skewy: (self: Actor, amount: number) -> (),
	skewx_before_rotation: (self: Actor, amount: number) -> (),
	shadowlength: (self: Actor, length: number) -> (),
	draworder: (self: Actor, order: number) -> (),
	rotationz2: (self: Actor, rotZ: number) -> (),
	rotationz: (self: Actor, rotZ: number) -> (),
	removecommand: (self: Actor, commandName: string) -> (),
	rotationy2: (self: Actor, rotY: number) -> (),
	rotationxyz2: (self: Actor, xPos: number, yPos: number, zPos: number) -> (),
	diffuseshift: (self: Actor) -> (),
	accelerate: (self: Actor, duration: number) -> (),
	SetShader: (self: Actor, shader: RageShaderProgram) -> (),
	zoomz: (self: Actor, scale: number) -> (),
	tween: (self: Actor, duration: number, expression: string | ((...any) -> (...any))) -> (),
	finishtweening: (self: Actor) -> (),
	spring: (self: Actor, duration: number) -> (),
	basezoomz: (self: Actor, scale: number) -> (),
	effectmagnitude: (self: Actor, x: number, y: number, z: number) -> (),
	croptop: (self: Actor, percent: number) -> (),
	ztest: (self: Actor, enable: number) -> (),
	play: (self: Actor) -> (),
	diffusealpha: (self: Actor, alpha: number) -> (),
	skewy_before_rotation: (self: Actor, amount: number) -> (),
	GetCurrentZoomY: (self: Actor) -> number,
	luaeffect: (self: Actor, name: string) -> (),
	hurrytweening: (self: Actor, factor: number) -> (),
	GetEffectZ: (self: Actor) -> number,
	cropbottom: (self: Actor, percent: number) -> (),
	getdiffuse: (self: Actor) -> (number, number, number, number),
	hidden: (self: Actor, enable: number) -> (),
	addx: (self: Actor, x: number) -> (),
	hibernate: (self: Actor, time: number) -> (),
	zbuffer: (self: Actor, enable: number) -> (),
	Draw: (self: Actor) -> (),
	glowshift: (self: Actor) -> (),
	getrotation: (self: Actor) -> (number, number, number),
	rotationx: (self: Actor, rotX: number) -> (),
	GetSecsIntoEffect: (self: Actor) -> number,
	horizalign: (self: Actor, hAlign: string) -> (),
	addaux: (self: Actor, deltaAux: number) -> (),
	position: (self: Actor, position: number) -> (),
	GetZ: (self: Actor) -> number,
	SetRotationOrder: (self: Actor, order: string) -> (),
	croph: (self: Actor, percentLeft: number, percentRight: number) -> (),
	addcommand: (self: Actor, commandName: string, func: ((...any) -> (...any))) -> (),
	pitch: (self: Actor, rotX: number) -> (),
	fadeleft: (self: Actor, percent: number) -> (),
	SetName: (self: Actor, name: string) -> (),
	effectcolor1: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	fadebottom: (self: Actor, percent: number) -> (),
	floorwag: (self: Actor) -> (),
	cropleft: (self: Actor, percent: number) -> (),
	fade: (self: Actor, percentLeft: number, percentTop: number, percentRight: number, percentBottom: number) -> (),
	effectclock: (self: Actor, clock: any) -> (),
	GetRotationOrder: (self: Actor) -> string,
	bounceend: (self: Actor, duration: number) -> (),
	setstate: (self: Actor, state: number) -> (),
	diffuseupperleft: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	diffusetopedge: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	diffuserightedge: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	rotationx2: (self: Actor, rotX: number) -> (),
	diffusecolor: (self: Actor, r: number, g: number, b: number, a: number) -> (),
	GetZoomY: (self: Actor) -> number,
	backfacecull: (self: Actor, enable: number) -> (),
	diffuseblink: (self: Actor) -> (),
	decelerate: (self: Actor, duration: number) -> (),
	fadev: (self: Actor, percentTop: number, percentBottom: number) -> (),
	GetCurrentRotationY: (self: Actor) -> number,
	blend: (self: Actor, mode: string) -> (),
	addy: (self: Actor, y: number) -> (),
	basezoomx: (self: Actor, scale: number) -> (),
	GetBaseZoomX: (self: Actor) -> number,
	align: (self: Actor, hPos: number, vPos: number) -> (),
	additiveblend: (self: Actor, enable: number) -> (),
	getcurrentrotation: (self: Actor) -> (number, number, number),
	SetTextureWrapping: (self: Actor, enable: number) -> (),
	effectoffset: (self: Actor, delay: number) -> (),
}
------------------------

----> CLASS: RageTexture <----
export type RageTexture = {
	GetTextureCoordRect: (self: RageTexture, frame: number) -> (number, number, number, number),
	GetSourceHeight: (self: RageTexture) -> number,
	GetPath: (self: RageTexture) -> string,
	GetImageWidth: (self: RageTexture) -> number,
	GetTextureWidth: (self: RageTexture) -> number,
	Reload: (self: RageTexture) -> ((...any) -> (...any)),
	GetImageHeight: (self: RageTexture) -> number,
	rate: (self: RageTexture, rate: number) -> (),
	GetTextureHeight: (self: RageTexture) -> number,
	position: (self: RageTexture, position: number) -> (),
	GetNumFrames: (self: RageTexture) -> number,
	loop: (self: RageTexture, enable: boolean) -> (),
	GetSourceWidth: (self: RageTexture) -> number,
}
------------------------------

----> CLASS: NoteSkinManager <----
export type NoteSkinManager = {
	GetPath: (self: NoteSkinManager, button: string, element: string) -> string,
	GetNoteSkinNames: (self: NoteSkinManager) -> { any },
}
----------------------------------

----> CLASS: PlayerStageStats <----
export type PlayerStageStats = {
	SetActualDancePoints: (self: PlayerStageStats, amount: number) -> (),
	GetOffsetVector: (self: PlayerStageStats) -> { any },
	SetHoldNoteScores: (self: PlayerStageStats, holdNoteScore: number, count: number) -> number,
	GetPlayedSteps: (self: PlayerStageStats) -> (),
	SetTapNoteScores: (self: PlayerStageStats, tapNoteScore: number, count: number) -> number,
	GetScore: (self: PlayerStageStats) -> number,
	GetNoteRowVector: (self: PlayerStageStats) -> { any },
	FullCombo: (self: PlayerStageStats) -> number,
	SetTapNoteScoresForPlayer: (self: PlayerStageStats, playerNumber: number, tapNoteScore: number, count: number) -> (),
	GetTapNoteScores: (self: PlayerStageStats, tapNoteScore: number) -> number,
	GetGrade: (self: PlayerStageStats) -> number,
	GetActualDancePoints: (self: PlayerStageStats) -> (),
	SetPossibleDancePoints: (self: PlayerStageStats, amount: number) -> (),
	GetPercentDancePoints: (self: PlayerStageStats) -> number,
	SetHoldNoteScoresForPlayer: (self: PlayerStageStats, playerNumber: number, holdNoteScore: number, count: number) -> (),
	SetCurrentCombo: (self: PlayerStageStats, combo: number) -> (),
	MaxCombo: (self: PlayerStageStats) -> number,
	GetCaloriesBurned: (self: PlayerStageStats) -> number,
	GetCurPossibleDancePoints: (self: PlayerStageStats) -> number,
	GetHoldNoteScoresForPlayer: (self: PlayerStageStats, playerNumber: number, holdNoteScore: number) -> number,
	GetCurrentLife: (self: PlayerStageStats) -> number,
	GetSurvivalSeconds: (self: PlayerStageStats) -> number,
	GetPossibleDancePoints: (self: PlayerStageStats) -> (),
	GetCurrentCombo: (self: PlayerStageStats) -> number,
	GetLifeRemainingSeconds: (self: PlayerStageStats) -> number,
	SetScore: (self: PlayerStageStats, score: number) -> (),
	GetMineRowVector: (self: PlayerStageStats) -> { [any]: any },
	GetNoteSongVector: (self: PlayerStageStats) -> { any },
	GetTapNoteScoresForPlayer: (self: PlayerStageStats, playerNumber: number, tapNoteScore: number) -> number,
	GetPossibleSteps: (self: PlayerStageStats) -> (),
	GetHoldNoteScores: (self: PlayerStageStats, holdNoteScore: number) -> number,
}
-----------------------------------

----> CLASS: RageSound <----
export type RageSound = {
	IsPaused: (self: RageSound) -> boolean,
	GetVolume: (self: RageSound) -> number,
	GetLengthSeconds: (self: RageSound) -> number,
	startsecond: (self: RageSound, start: number) -> (),
	GetStartSecond: (self: RageSound) -> number,
	GetSoundPosition: (self: RageSound) -> number,
	Play: (self: RageSound) -> (),
	GetStopMode: (self: RageSound) -> string,
	GetPan: (self: RageSound) -> number,
	volume: (self: RageSound, volume: number) -> (),
	stopmode: (self: RageSound, mode: string) -> (),
	pan: (self: RageSound, balance: number) -> (),
	SetSoundPosition: (self: RageSound) -> (),
	speed: (self: RageSound, speed: number) -> (),
	Stop: (self: RageSound) -> (),
	pitch: (self: RageSound, speed: number) -> (),
	IsPlaying: (self: RageSound) -> boolean,
	SetParam: (self: RageSound, param: string, value: number) -> (),
	Load: (self: RageSound, path: string) -> (),
	Pause: (self: RageSound, enable: boolean) -> (),
}
----------------------------

----> CLASS: RageFileManager <----
export type RageFileManager = {
	LuaLoadFile: (self: RageFileManager, path: string) -> (((...any) -> (...any)), string),
}
----------------------------------

----> CLASS: Profile <----
export type Profile = {
	ClearHighScoresForCourseAndTrail: (self: Profile, course: Course, stepsType: number, difficulty: number) -> (),
	GetCoursesPercentComplete: (self: Profile, stepsType: number, difficulty: number) -> number,
	GetTotalStepsWithTopGrade: (self: Profile, stepsType: number, difficulty: number, grade: number) -> number,
	ClearHighScoresForSong: (self: Profile, song: string) -> (),
	SetWeightPounds: (self: Profile, pounds: number) -> (),
	GetSongsPossible: (self: Profile, stepsType: number, difficulty: number) -> number,
	ClearHighScoresForSongAndSteps: (self: Profile, song: string, steps: number) -> (),
	SetGoalType: (self: Profile, goalType: number) -> (),
	GetGoalCalories: (self: Profile) -> number,
	SetGoalSeconds: (self: Profile, seconds: any) -> (),
	SetGoalCalories: (self: Profile, seconds: any) -> (),
	GetTotalNumSongsPlayed: (self: Profile) -> number,
	IsCodeUnlocked: (self: Profile, id: string) -> boolean,
	GetHighScoreForCourseAndTrail: (self: Profile, course: Course, stepsType: number, difficulty: number) -> HighScore,
	ClearHighScoresForCourse: (self: Profile, course: Course) -> (),
	GetWeightPounds: (self: Profile) -> number,
	GetTotalTrailsWithTopGrade: (self: Profile, stepsType: number, difficulty: number, grade: number) -> number,
	GetSaved: (self: Profile) -> { [any]: any },
	GetCoursesPossible: (self: Profile, stepsType: number, difficulty: number) -> number,
	GetSongNumTimesPlayed: (self: Profile, song: Song) -> number,
	GetCaloriesBurnedToday: (self: Profile) -> number,
	GetSongsActual: (self: Profile, stepsType: number, difficulty: number) -> number,
	GetSongsPercentComplete: (self: Profile, stepsType: number, difficulty: number) -> number,
	GetCoursesActual: (self: Profile, stepsType: number, difficulty: number) -> number,
	GetGoalSeconds: (self: Profile) -> number,
	GetGoalType: (self: Profile) -> number,
	GetHighScoreForSongAndSteps: (self: Profile, song: string, steps: number) -> (),
}
--------------------------

----> CLASS: RageInput <----
export type RageInput = {
	GetDescriptions: (self: RageInput) -> { any },
	Reset: (self: RageInput) -> (),
}
----------------------------

----> CLASS: Game <----
export type Game = {
	GetName: (self: Game) -> string,
}
-----------------------

----> CLASS: Course <----
export type Course = {
	GetTranslitFullTitle: (self: Course) -> string,
	GetDisplayFullTitle: (self: Course) -> string,
	GetCourseDir: (self: Course) -> string,
	GetPlayMode: (self: Course) -> number,
}
-------------------------

----> CLASS: ActorFrame (Actor) <----
export type ActorFrame = Actor & {
	SetFarDist: (self: ActorFrame, farDist: number) -> (),
	SetFOV: (self: ActorFrame, fov: number) -> (),
	SetUpdateFunction: (self: ActorFrame, updateFunc: ((...any) -> (...any))) -> (),
	GetChild: (self: ActorFrame, name: string) -> Actor | nil,
	GetNumChildren: (self: ActorFrame) -> number,
	SetDrawByZPosition: (self: ActorFrame, enable: boolean) -> (),
	SetDrawFunction: (self: ActorFrame, drawFunc: ((...any) -> (...any))) -> (),
	GetChildAt: (self: ActorFrame, index: number) -> Actor | nil,
	propagateshaders: (self: ActorFrame, enable: number) -> (),
	SetUpdateCommand: (self: ActorFrame, name: string) -> (),
	fov: (self: ActorFrame, fov: number) -> (),
	SetVanishPoint: (self: ActorFrame, x: number, y: number) -> (),
	SetUpdateRate: (self: ActorFrame, rate: number) -> (),
	SetVanishY: (self: ActorFrame, y: number) -> (),
	SetVanishX: (self: ActorFrame, x: number) -> (),
	propagate: (self: ActorFrame, enable: number) -> (),
	GetChildren: (self: ActorFrame) -> { any },
}
-------------------------------------

----> CLASS: ActorSound (Actor) <----
export type ActorSound = Actor & {
	stop: (self: ActorSound) -> (),
	play: (self: ActorSound) -> (),
	start: (self: ActorSound) -> (),
	pause: (self: ActorSound, enable: boolean) -> (),
	load: (self: ActorSound, path: string) -> (),
	get: (self: ActorSound) -> RageSound,
}
-------------------------------------

----> CLASS: RageTextureRenderTarget (RageTexture) <----
export type RageTextureRenderTarget = RageTexture & {
	FinishRenderingTo: (self: RageTextureRenderTarget) -> (),
	BeginRenderingTo: (self: RageTextureRenderTarget, preserveTexture: boolean) -> (),
}
--------------------------------------------------------

----> CLASS: BitmapText (Actor) <----
export type BitmapText = Actor & {
	GetText: (self: BitmapText) -> string,
	wrapwidthpixels: (self: BitmapText, width: number) -> (),
	settext: (self: BitmapText, text: string) -> (),
	maxheight: (self: BitmapText, height: number) -> (),
	maxwidth: (self: BitmapText, width: number) -> (),
}
-------------------------------------

----> CLASS: Sprite (Actor) <----
export type Sprite = Actor & {
	looppoint: (self: Sprite, point: number) -> (),
	customtexturerect: (self: Sprite, left: number, top: number, right: number, bottom: number) -> (),
	SetTexture: (self: Sprite, texture: RageTexture) -> (),
	texcoordvelocity: (self: Sprite, x: number, y: number) -> (),
	rate: (self: Sprite, rate: number) -> (),
	GetTexture: (self: Sprite) -> RageTexture,
	stretchtexcoords: (self: Sprite, x: number, y: number) -> (),
	LoadBanner: (self: Sprite, path: string) -> (),
	loop: (self: Sprite, enable: boolean) -> (),
	scaletoclipped: (self: Sprite, width: number, height: number) -> (),
	Load: (self: Sprite, path: string | nil) -> (),
	LoadBackground: (self: Sprite, path: string) -> (),
	GetNumStates: (self: Sprite) -> number,
	getstate: (self: Sprite) -> number,
}
---------------------------------

----> CLASS: Model (Actor) <----
export type Model = Actor & {
	SetLineWidth: (self: Model, width: number) -> (),
	SetTexture: (self: Model, index: number, texture: RageTexture) -> (),
	playanimationframe: (self: Model, name: string, rate: number, frame: number) -> (),
	LoadMilkshapeAsciiBones: (self: Model, aniName: string, path: string) -> (),
	GetCurrentFrame: (self: Model) -> number,
	animateone: (self: Model, enable: boolean, index: number) -> (),
	LoadMilkshapeAsciiMaterials: (self: Model, path: string) -> (),
	setstate: (self: Model, state: number) -> (),
	SetTextureScale: (self: Model, index: number, scale: number) -> (),
	SetTextureTranslateX: (self: Model, index: number, x: number) -> (),
	SetUseZBuffer: (self: Model, enable: boolean) -> (),
	SetLineColor: (self: Model, r: number, g: number, b: number, a: number) -> (),
	SetInvertCelPass: (self: Model, enable: boolean) -> (),
	GetTotalFrames: (self: Model) -> number,
	playanimation: (self: Model, name: string, rate: number) -> (),
	SetOutlinesOnTop: (self: Model, enable: boolean) -> (),
	LoadMilkshapeAscii: (self: Model, path: string) -> (),
	SetTextureScaleX: (self: Model, index: number, x: number) -> (),
	SetCelShaded: (self: Model, enable: boolean) -> (),
	SetTextureScaleY: (self: Model, index: number, y: number) -> (),
	SetAlphaTexture: (self: Model, index: number, texture: RageTexture) -> (),
	SetTextureRotate: (self: Model, index: number, rotation: number) -> (),
	setstateone: (self: Model, state: number, index: number) -> (),
	SetPolygonMode: (self: Model, mode: number) -> (),
	SetTextureTranslateY: (self: Model, index: number, y: number) -> (),
	ResetAlphaTexture: (self: Model, index: number) -> (),
	SetAnimationRate: (self: Model, rate: number) -> number,
	ResetTexture: (self: Model, index: number) -> (),
}
--------------------------------

----> CLASS: Polygon (Actor) <----
export type Polygon = Actor & {
	SetLineWidth: (self: Polygon, width: number) -> (),
	SetDrawMode: (self: Polygon, mode: string) -> (),
	AddDrawSplit: (self: Polygon, index: number) -> (),
	GetVertexColor: (self: Polygon, index: number) -> (number, number, number, number),
	SetVertexNormal: (self: Polygon, index: number, x: number, y: number, z: number) -> (),
	GetTexture: (self: Polygon) -> RageTexture,
	SetPolygonMode: (self: Polygon, mode: number) -> (),
	GetVertexNormal: (self: Polygon, index: number) -> (number, number, number),
	GetNumVertices: (self: Polygon) -> number,
	SetVertexAlpha: (self: Polygon, index: number, a: number) -> (),
	SetTexture: (self: Polygon, texture: RageTexture) -> (),
	SetVertexTexCoord: (self: Polygon, index: number, u: number, v: number, w: number | nil) -> (),
	SetNumVertices: (self: Polygon, count: number) -> (),
	GetVertexTexCoord: (self: Polygon, index: number) -> (number, number, number),
	SetVertexPosition: (self: Polygon, index: number, x: number, y: number, z: number) -> (),
	SetVertexColor: (self: Polygon, index: number, r: number, g: number, b: number, a: number) -> (),
	GetVertexPosition: (self: Polygon, index: number) -> (number, number, number),
}
----------------------------------

----> CLASS: ActorProxy (Actor) <----
export type ActorProxy = Actor & {
	SetTarget: (self: ActorProxy, actor: Actor | nil) -> (),
	GetTarget: (self: ActorProxy) -> Actor | nil,
}
-------------------------------------

----> CLASS: DifficultyMeter (ActorFrame) <----
export type DifficultyMeter = ActorFrame & {
	SetFromTrail: (self: DifficultyMeter, trail: Trail) -> (),
	SetFromMeterAndDifficulty: (self: DifficultyMeter, meter: number, difficulty: number) -> (),
	SetFromSteps: (self: DifficultyMeter, steps: Steps) -> (),
	Load: (self: DifficultyMeter, path: string) -> (),
}
-----------------------------------------------

----> CLASS: FadingBanner (ActorFrame) <----
export type FadingBanner = ActorFrame & {
	ScaleToClipped: (self: FadingBanner, width: number, height: number) -> (),
	LoadFromSong: (self: FadingBanner, song: Song) -> (),
}
--------------------------------------------

----> CLASS: ActorScroller (ActorFrame) <----
export type ActorScroller = ActorFrame & {
	SetCurrentAndDestinationItem: (self: ActorScroller, index: number) -> (),
}
---------------------------------------------

----> CLASS: ActorFrameTexture (ActorFrame) <----
export type ActorFrameTexture = ActorFrame & {
	EnablePreserveTexture: (self: ActorFrameTexture, enable: boolean) -> (),
	SetTextureName: (self: ActorFrameTexture, name: string) -> (),
	EnableFloat: (self: ActorFrameTexture, enable: boolean) -> (),
	Create: (self: ActorFrameTexture) -> (),
	EnableDepthBuffer: (self: ActorFrameTexture, enable: boolean) -> (),
	EnableAlphaBuffer: (self: ActorFrameTexture, enable: boolean) -> (),
	EnableGrayscale: (self: ActorFrameTexture, enable: boolean) -> (),
	GetTextureName: (self: ActorFrameTexture) -> string,
	GetTexture: (self: ActorFrameTexture) -> RageTextureRenderTarget,
	Recreate: (self: ActorFrameTexture) -> (),
}
-------------------------------------------------

----> CLASS: HelpDisplay (BitmapText) <----
export type HelpDisplay = BitmapText & {
	gettips: (self: HelpDisplay) -> { [any]: any },
	settips: (self: HelpDisplay, tips: { [any]: any }, altTips: { [any]: any } | nil) -> (),
}
-------------------------------------------

----> CLASS: ScreenGameplay (ActorFrame) <----
export type ScreenGameplay = ActorFrame & {
	GetLife: (self: ScreenGameplay, playerNumber: number) -> number,
	SetLife: (self: ScreenGameplay, playerNumber: number, life: number) -> (),
	PauseGame: (self: ScreenGameplay, pause: boolean) -> (),
}
----------------------------------------------

----> CLASS: Player (ActorFrame) <----
export type Player = ActorFrame & {
	ClearArrowShader: (self: Player) -> (),
	ClearHiddenRegions: (self: Player) -> (),
	ResetRotZSplines: (self: Player, column: number) -> (),
	SendJudgment: (self: Player, judgment: number, early: boolean, offset: number | nil, beat: number | nil) -> (),
	GetMissCombo: (self: Player) -> number,
	ClearArrowPathShader: (self: Player) -> (),
	SetNumArrowGradientPoints: (self: Player, column: number, amount: number) -> (),
	GetHoldShader: (self: Player) -> RageShaderProgram | nil,
	SetSizeSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	SetXSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	SetPathGradientPoint: (self: Player, point: number, column: number, offset: number) -> (),
	ResetRotYSplines: (self: Player, column: number) -> (),
	SetArrowShader: (self: Player, shader: RageShaderProgram) -> (),
	ClearHoldShader: (self: Player) -> (),
	FakeStep: (self: Player, column: number) -> (),
	DidHoldNote: (self: Player, column: number, unk: boolean | nil) -> (),
	GetCMod: (self: Player) -> number,
	ResetStealthSplines: (self: Player, column: number) -> (),
	NoClearSplines: (self: Player, enable: boolean) -> (),
	SetMissCombo: (self: Player, combo: number) -> (),
	GetArrowShader: (self: Player) -> RageShaderProgram | nil,
	ResetSizeSplines: (self: Player, column: number) -> (),
	GetNumTapsInRange: (self: Player, startBeat: number, endBeat: number) -> number,
	SetRotXSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	PushNoteData: (self: Player, varName: string, startBeat: number | nil, endBeat: number | nil) -> (),
	SetArrowPathBlendMode: (self: Player, mode: string) -> (),
	SetNoteData: (self: Player, chart: number) -> (),
	GetSpeedMod: (self: Player) -> number,
	SetZSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	SetYSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	SetStealthSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	SetStealthGradientPoint: (self: Player, point: number, column: number, offset: number) -> (),
	SetReceptorShader: (self: Player, shader: RageShaderProgram) -> (),
	SetStealthGradientColor: (self: Player, point: number, column: number, r: number, g: number, b: number, a: number) -> (),
	FakeSetPressed: (self: Player, column: number) -> (),
	SetSkewSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	GetNoteData: (self: Player, startBeat: number | nil, endBeat: number | nil) -> { any },
	PushNoteDataTime: (self: Player, varName: string, startBeat: number | nil, endBeat: number | nil) -> (),
	SetPlayerController: (self: Player, controller: number) -> (),
	DidTapNote: (self: Player, column: number, judgment: number, unk: boolean | nil) -> (),
	SetRandomVanishTransform: (self: Player, mod: string) -> (),
	ClearReceptorShader: (self: Player) -> (),
	SetRotYSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	ResetXSplines: (self: Player, column: number) -> (),
	SetPathGradientColor: (self: Player, point: number, column: number, r: number, g: number, b: number, a: number) -> (),
	SetNumStealthGradientPoints: (self: Player, column: number, amount: number) -> (),
	SetAwake: (self: Player, enable: boolean) -> boolean,
	GetXMod: (self: Player) -> number,
	SetNoteTypeMults: (self: Player, multipliers: { any }) -> (),
	SetNoteDataFromLua: (self: Player, noteData: { [any]: any }) -> (),
	SetMineSound: (self: Player, path: string) -> (),
	SetInputPlayer: (self: Player, player: number) -> (),
	SetHoldShader: (self: Player, shader: RageShaderProgram) -> (),
	SetArrowPathShader: (self: Player, shader: RageShaderProgram) -> (),
	SetHiddenRegions: (self: Player, regions: { any }) -> (),
	ResetRotXSplines: (self: Player, column: number) -> (),
	SetNumPathGradientPoints: (self: Player, column: number, amount: number) -> (),
	IsUsingCMod: (self: Player) -> boolean,
	SetArrowGradientPoint: (self: Player, point: number, column: number, offset: number) -> (),
	ResetZSplines: (self: Player, column: number) -> (),
	ResetSkewSplines: (self: Player, column: number) -> (),
	SetArrowGradientColor: (self: Player, point: number, column: number, r: number, g: number, b: number, a: number) -> (),
	ResetYSplines: (self: Player, column: number) -> (),
	SetCombo: (self: Player, combo: number) -> (),
	RealStep: (self: Player, column: number) -> (),
	GetArrowPathShader: (self: Player) -> RageShaderProgram | nil,
	SetRotZSpline: (self: Player, index: number, column: number, value: number, offset: number, activationSpeed: number) -> (),
	GetCombo: (self: Player) -> number,
	IsUsingReverse: (self: Player) -> boolean,
	ClearNoteTypeMults: (self: Player) -> (),
	GetReceptorShader: (self: Player) -> RageShaderProgram | nil,
	IsAwake: (self: Player) -> boolean,
	GetNoteDataTime: (self: Player) -> { any },
}
--------------------------------------

----> CLASS: Quad (Actor) <----
export type Quad = Actor & {
	-- TODO:
}
-------------------------------

--> CONSTANTS
export type DayOfYear = () -> number
export type SecondsToMSSMsMs = (seconds: number) -> string
export type IsExtraStage2 = () -> boolean
export type GetInputType = () -> string
export type GetDiskSpaceFree = () -> string
export type IsUsingMemoryCard = (player: number) -> boolean
export type CourseDifficultyToThemedString = (courseDifficulty: number) -> string
export type NumStagesLeft = () -> number
export type GetStageText = () -> string
export type GetNumCrashLogs = () -> number
export type Year = () -> number
export type Weekday = () -> number
export type GetBestFinalGrade = () -> number
export type Trace = (message: string) -> boolean
export type ConnectToServer = () -> boolean
export type Hour = () -> number
export type DifficultyToThemedString = (difficulty: number) -> string
export type GetNumIOErrors = () -> number
export type PlayModeName = () -> string
export type GetNumMachineScores = () -> number
export type AllFailed = () -> boolean
export type GradeToString = (grade: number) -> string
export type SecondsToMMSS = (seconds: number) -> string
export type SecondsToMMSSMsMsMs = (seconds: number) -> string
export type GetProductVer = () -> string
export type GetIP = () -> string
export type SecondsToMMSSMsMs = (seconds: number) -> string
export type GetProductName = () -> string
export type CurStyleName = () -> string
export type OnePassed = () -> boolean
export type MonthToString = () -> string
export type GetGradeFromPercent = (percent: number) -> number
export type GetEasiestNotesDifficulty = () -> number
export type GetDiskSpaceTotal = () -> string
export type Minute = () -> number
export type CourseSongIndex = () -> number
export type GetNumMachineEdits = () -> number
export type IsNetSMOnline = () -> boolean
export type IsNetConnected = () -> boolean
export type IsFinalStage = () -> boolean
export type Debug = (message: string) -> boolean
export type IsExtraStage = () -> boolean
export type IsAnyPlayerUsingMemoryCard = () -> boolean
export type HubIsConnected = () -> boolean
export type Grade = (name: string) -> number
export type Second = () -> number
export type GetUptime = () -> string
export type GetRevision = () -> number
export type GetSerialNumber = () -> string
export type ReportStyle = () -> boolean
export type FormatPercentScore = (score: number) -> string
export type IsSMOnlineLoggedIn = (player: number) -> boolean
export type MonthOfMonth = () -> number
export type DayOfMonth = () -> number
export type SCREEN_HEIGHT = number
export type DISPLAY = RageDisplay
export type MEMCARDMAN = MemoryCardManager
export type SCREEN_CENTER_Y = number
export type SCREENMAN = ScreenManager
export type DISPLAY_LEFT = number
export type DISPLAY_CENTER_X = number
export type DISPLAY_TOP = number
export type FUCK_VERSION_3_1 = number
export type DISPLAY_RIGHT = number
export type SOUND = GameSoundManager
export type FUCK_VERSION_3 = number
export type INPUTMAN = RageInput
export type FUCK_VERSION_1 = number
export type PROFILEMAN = ProfileManager
export type NOTESKIN = NoteSkinManager
export type FUCK_EXE = boolean
export type SCREEN_TOP = number
export type PLAYER_2 = number
export type SCREEN_RIGHT = number
export type SCREEN_CENTER_X = number
export type MESSAGEMAN = MessageManager
export type THEME = ThemeManager
export type DISPLAY_CENTER_Y = number
export type DISPLAY_WIDTH = number
export type PLAYER_1 = number
export type DISPLAY_BOTTOM = number
export type STATSMAN = StatsManager
export type OPENITG_VERSION = number
export type SONGMAN = SongManager
export type GAMESTATE = GameState
export type SCREEN_LEFT = number
export type SCREEN_BOTTOM = number
export type OPENITG = boolean
export type PREFSMAN = PrefsManager
export type DISPLAY_HEIGHT = number
export type UNLOCKMAN = UnlockManager
export type FUCK_VERSION_2 = number
export type SCREEN_WIDTH = number
export type FILEMAN = RageFileManager

--> MODS 
-- https://xerool.github.io/notitg-mirin/docs/mods.html

type mods_part1 = "xmod" | "cmod" | "scrollspeedmult" | "scrollspeedmult0" | "brake" | "brake0" | "boost" | "boost0" | "boomerang" | 
	"wave" | "wave0" | "waveperiod" | "waveperiod0" | "waveoffset" | "waveoffset0" | "expand" | "expandsize" | "expandperiod" | "tanexpand" | 
	"tanexpandsize" | "tanexpandperiod" | "arrowpath" | "arrowpath0" | "arrowpathgirth" | "arrowpathwidth" | "arrowpathsize" | "arrowpathgrain" | "arrowpathdrawsize" | "arrowpathdrawsizefront" | 
	"arrowpathdrawsizeback" | "grain" | "drawsize" | "drawsizefront" | "drawsizeback" | "shrinklinear" | "shrinklinearx" | "shrinklineary" | "shrinklinearz" | "shrinkmult" | 
	"shrinkmultx" | "shrinkmulty" | "shrinkmultz" | "pulse" | "pulseinner" | "pulseouter" | "pulseperiod" | "pulseoffset" | "tanpulse" | "tanpulseinner" | 
	"tanpulseouter" | "tanpulseperiod" | "tanpulseoffset" | "spiralx" | "spiralxperiod" | "spiralxoffset" | "spiraly" | "spiralyperiod" | "spiralyoffset" | "spiralz" | 
	"spiralzperiod" | "spiralzoffset" | "beat" | "beat0" | "beatperiod" | "beatperiod0" | "beatoffset" | "beatoffset0" | "beatmult" | "beatmult0" | 
	"beatsize" | "beatsize0" | "beatcap" | "beatcap0" | "beaty" | "beaty0" | "beatyperiod" | "beatyperiod0" | "beatyoffset" | "beatyoffset0" | 
	"beatymult" | "beatymult0" | "beatysize" | "beatysize0" | "beatcapy" | "beatcapy0" | "beatz" | "beatz0" | "beatzperiod" | "beatzperiod0" | 
	"beatzoffset" | "beatzoffset0" | "beatzmult" | "beatzmult0" | "beatzsize" | "beatzsize0" | "beatcapz" | "beatcapz0" | "tipsy" | "tipsy0" | 
	"tipsyoffset" | "tipsyoffset0" | "tipsyspacing" | "tipsyspacing0" | "tipsyspeed" | "tipsyspeed0" | "tantipsy" | "tantipsy0" | "tantipsyoffset" | "tantipsyoffset0" | 
	"tantipsyspacing" | "tantipsyspacing0" | "tantipsyspeed" | "tantipsyspeed0" | "asymptote" | "asymptotesize" | "asymptotescale" | "asymptoteoffset" | "attenuate" | "attenuateoffset" | 
	"attenuatex" | "attenuatexoffset" | "attenuatez" | "attenuatezoffset" | "cubicxoffset" | "cubicyoffset" | "cubiczoffset" | "cubicx" | "cubicy" | "cubicz" | 
	"parabolax" | "parabolaxoffset" | "parabolay" | "parabolayoffset" | "parabolaz" | "parabolazoffset" | "tornado" | "tornadoperiod" | "tornadooffset" | "tornadoz" | 
	"tornadozperiod" | "tornadozoffset" | "tantornado" | "tantornadoperiod" | "tantornadooffset" | "tantornadoz" | "tantornadozperiod" | "tantornadozoffset" | "noteskew" | "noteskew0" | 
	"noteskewx" | "noteskewx0" | "noteskewy" | "noteskewy0" | "noteskewtype" | "skewtype" | "digital" | "digitalperiod" | "digitaloffset" | "digitalsteps" | 
	"digitalz" | "digitalzperiod" | "digitalzoffset" | "digitalzsteps" | "tandigital" | "tandigitalperiod" | "tandigitaloffset" | "tandigitalsteps" | "tandigitalz" | "tandigitalzperiod" | 
	"tandigitalzoffset" | "tandigitalzsteps" | "bounce" | "bounceperiod" | "bounceoffset" | "bouncez" | "bouncezperiod" | "bouncezoffset" | "square" | "squareperiod" | 
	"squareoffset" | "squarez" | "squarezperiod" | "squarezoffset" | "sawtooth" | "sawtooth0" | "sawtoothperiod" | "sawtoothperiod0" | "sawtoothoffset" | "sawtoothoffset0" | 
	"sawtoothsize" | "sawtoothsize0" | "sawtoothz" | "sawtoothz0" | "sawtoothzperiod" | "sawtoothzperiod0" | "sawtoothzoffset" | "sawtoothzoffset0" | "sawtoothzsize" | "sawtoothzsize0" | 
	"zigzag" | "zigzag0" | "zigzagperiod" | "zigzagperiod0" | "zigzagoffset" | "zigzagoffset0" | "zigzagsize" | "zigzagsize0" | "zigzagz" | "zigzagz0" | 
	"zigzagzperiod" | "zigzagzperiod0" | "zigzagzoffset" | "zigzagzoffset0" | "zigzagzsize" | "zigzagzsize0" | "drunk" | "drunk0" | "drunkperiod" | "drunkperiod0" | 
	"drunkoffset" | "drunkoffset0" | "drunkspacing" | "drunkspacing0" | "drunkspeed" | "drunkspeed0" | "drunksize" | "drunksize0" | "drunky" | "drunky0" | 
	"drunkyperiod" | "drunkyperiod0" | "drunkyoffset" | "drunkyoffset0" | "drunkyspacing" | "drunkyspacing0" | "drunkyspeed" | "drunkyspeed0" | "drunkysize" | "drunkysize0" | 
	"drunkz" | "drunkz0" | "drunkzperiod" | "drunkzperiod0" | "drunkzoffset" | "drunkzoffset0" | "drunkzspacing" | "drunkzspacing0" | "drunkzspeed" | "drunkzspeed0" | 
	"drunkzsize" | "drunkzsize0" | "tandrunk" | "tandrunk0" | "tandrunkperiod" | "tandrunkperiod0" | "tandrunkoffset" | "tandrunkoffset0" | "tandrunkspacing" | "tandrunkspacing0" | 
	"tandrunkspeed" | "tandrunkspeed0" | "tandrunksize" | "tandrunksize0" | "tandrunky" | "tandrunky0" | "tandrunkyperiod" | "tandrunkyperiod0" | "tandrunkyoffset" | "tandrunkyoffset0" | 
	"tandrunkyspacing" | "tandrunkyspacing0" | "tandrunkyspeed" | "tandrunkyspeed0" | "tandrunkysize" | "tandrunkysize0" | "tandrunkz" | "tandrunkz0" | "tandrunkzperiod" | "tandrunkzperiod0" | 
	"tandrunkzoffset" | "tandrunkzoffset0" | "tandrunkzspacing" | "tandrunkzspacing0" | "tandrunkzspeed" | "tandrunkzspeed0" | "tandrunkzsize" | "tandrunkzsize0" | "bumpy" | "bumpy0" | 
	"bumpyperiod" | "bumpyperiod0" | "bumpyoffset" | "bumpyoffset0" | "bumpysize" | "bumpysize0" | "bumpyx" | "bumpyx0" | "bumpyxperiod" | "bumpyxperiod0" | 
	"bumpyxoffset" | "bumpyxoffset0" | "bumpyxsize" | "bumpyxsize0" | "bumpyy" | "bumpyy0" | "bumpyyperiod" | "bumpyyperiod0" | "bumpyyoffset" | "bumpyyoffset0" | 
	"bumpyysize" | "bumpyysize0" | "bumpyz" | "bumpyz0" | "bumpyzperiod" | "bumpyzperiod0" | "bumpyzoffset" | "bumpyzoffset0" | "bumpyzsize" | "bumpyzsize0" | 
	"tanbumpy" | "tanbumpy0" | "tanbumpyperiod" | "tanbumpyperiod0" | "tanbumpyoffset" | "tanbumpyoffset0" | "tanbumpysize" | "tanbumpysize0" | "tanbumpyx" | "tanbumpyx0" | 
	"tanbumpyxperiod" | "tanbumpyxperiod0" | "tanbumpyxoffset" | "tanbumpyxoffset0" | "tanbumpyxsize" | "tanbumpyxsize0" | "tanbumpyy" | "tanbumpyy0" | "tanbumpyyperiod" | "tanbumpyyperiod0" | 
	"tanbumpyyoffset" | "tanbumpyyoffset0" | "tanbumpyysize" | "tanbumpyysize0" | "tanbumpyz" | "tanbumpyz0" | "tanbumpyzperiod" | "tanbumpyzperiod0" | "tanbumpyzoffset" | "tanbumpyzoffset0" | 
	"tanbumpyzsize" | "tanbumpyzsize0" | "cover" | "blind" | "halgun" | "noholdjudge" | "disablemines" | "centered" | "centered2" | "split" | 
	"cross" | "alternate" | "reverse" | "reverse0" | "reversetype" | "hidenoteflash" | "hidenoteflash0" | "hidenoteflashes" | "hidenoteflashes0" | "hidenotepress" | 
	"hidenotepress0" | "manualnoteflash" | "manualnoteflash0" | "hideholds" | "holdstealth" | "hidemines" | "minestealth" | "invert" | "flip" | "mini" | 
	"dizzy" | "dizzy0" | "twirl" | "twirl0" | "roll" | "roll0" | "approachtype" | "dizzyholds" | "holdtype" | "spiralholds" | 
	"straightholds" | "straightholds0" | "longholds" | "holdgirth" | "holdgirth0" | "holdtiny" | "holdtiny0" | "orient" | "noreorient" | "orientoffset" | 
	"gayholds" | "gayholds0" | "hide" | "arrowcull" | "holdcull" | "glitchytan" | "globalmodtimeroffset" | "modtimeroffset" | "timeroffset" | "timer" | 
	"modtimer" | "globalmodtimer" | "timermult" | "modtimermult" | "globalmodtimermult" | "clearall" | "wireframe" | "wireframe0" | "wireframegirth" | "wireframegirth0" | 
	"wireframewidth" | "wireframewidth0" | "tiny" | "tiny0" | "tinyx" | "tinyx0" | "tinyy" | "tinyy0" | "tinyz" | "tinyz0" | 
	"confusionoffset" | "confusionoffset0" | "confusionxoffset" | "confusionxoffset0" | "confusionyoffset" | "confusionyoffset0" | "confusionzoffset" | "confusionzoffset0" | "confusion" | "confusionx" | 
	"confusiony" | "confusionz" | "dark" | "dark0" | "stealth" | "stealth0" | "stealthpastreceptors" | "stealthtype" | "stealthglowred" | "stealthglowgreen" | 
	"stealthglowblue" | "blink" | "blinkred" | "blinkgreen" | "blinkblue" | "sudden" | "suddenoffset" | "hidden" | "hiddenoffset" | "suddenred" | 
	"suddengreen" | "suddenblue" | "suddenredoffset" | "suddengreenoffset" | "suddenblueoffset" | "hiddenred" | "hiddengreen" | "hiddenblue" | "hiddenredoffset" | "hiddengreenoffset" | 
	"hiddenblueoffset" | "vanish" | "vanishoffset" | "vanishsize" | "zbuffer" | "sinclip" | "cosclip" | "tanclip" | "movex" | "movex0" | 
	"movey" | "movey0" | "movez" | "movez0" | "x" | "y" | "z" | "rotationx" | "rotationy" | "rotationz" | 
	"zoomx" | "zoomy" | "zoomz" | "zoom" | "skewx" | "skewy"
export type mods = string | mods_part1

return {}